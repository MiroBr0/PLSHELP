local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")
local RunService = game:GetService("RunService")

local dataStore = DataStoreService:GetDataStore("Official")

local function giveCurrency(player: player)
	while true do
		task.wait(1)
		player.leaderstats.Pommes.Value += 1
		player.leaderstats.Coins.Value += 1
	end
end

local function SetupPlayerData(player: player)
	local userid = player.UserId
	local key = "Player_"..userid
	
	local leaderstats = Instance.new("Folder", player)
	leaderstats.Name = "leaderstats"
	
	local coins = Instance.new("IntValue", leaderstats)
	coins.Name = "Coins"
	coins.Value = 0
	
	local pommes = Instance.new("IntValue", leaderstats)
	pommes.Name = "Pommes"
	pommes.Value = 0
	
	local success, returnValue
	success, returnValue = pcall(dataStore.GetAsync, dataStore, key)
	
	if success then
		if returnValue == nil then
			returnValue = {
				Pommes = 0,
				Coins = 0,
				
			}
		end
		
		
		print(returnValue)
		pommes.Value = if returnValue.Pommes == nil then returnValue.Pommes else 0
		coins.Value = if returnValue.Coins == nil then returnValue.Coins else 0
		
	else
		player:Kick("There was a problem loading your data, roblox DataStore can be down.")
		print(player.Name.." data error!")
	end
	--giveCurrency(player)
end


local function save(player)
	local userid = player.UserId
	local key = "Player_"..userid
	
	local pommes = player.leaderstats.Pommes.Value
	local coins = player.leaderstats.Coins.Value
	
	local dataTable = {
		Pommes = pommes,
		Coins = coins,
	}
	print(dataTable)
	
	local succes, returnValue
	succes, returnValue = pcall(dataStore.UpdateAsync, dataStore, key, function()
		return dataTable
	end)
	
	if succes then
		print("Data Saved!")
	else
		print("Data Saving ERORR!")
	end
end

local function onShutdown()
	if RunService:IsStudio() then
		task.wait(2)
	else
		local finished = Instance.new("BindableEvent")
		local allPlayers = Players:GetPlayers()
		local leftPlayers = #allPlayers
		
		for _, player in ipairs(allPlayers) do
			coroutine.wrap(function()
				save(player)
				leftPlayers -= 1
				if leftPlayers == 0 then
					finished:Fire()
				end
			end)()
		end
		finished.Event:Wait()
	end
end

Players.PlayerAdded:Connect(SetupPlayerData)
Players.PlayerRemoving:Connect(save)
game:BindToClose(onShutdown)
